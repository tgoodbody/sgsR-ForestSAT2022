{
  "hash": "7f08717bc3a6f939b1f6ce728b886c74",
  "result": {
    "markdown": "---\ntitle: \"`sgsR` - Structurally Guided Sampling\"\nauthor: \"___Tristan Goodbody__, Nicholas Coops, Martin Queinnec, Joanne White, Piotr Tompalski, Andrew Hudak, David Auty, Ruben Valbuena, Antoine LeBoeuf, Ian Sinclair, Grant McCartney, Jean-Francois Prieur, Murray Woods_\"\ninstitute: \"__University of British Columbia__\"\ndate: \"September 2^nd^, 2022 @ Berlin\"\nformat:\n  revealjs: \n    self-contained: true\n    slide-number: true\n    preview-links: auto\n    logo: images/logo.png\n    footer: <https://tgoodbody.github.io/sgsR/>\n    progress: true\n    multiplex: true\n    width: 1280\n    height: 720\n    theme: [simple, assets/styles.scss]\n    controls: true\n    css: [assets/custom.css]\nexecute:\n  echo: true\n---\n\n\n\n## Take-away message <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"images/logo.png\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\n-   **`sgsR`** is an R-package developed to implement *structurally guided sampling* approaches for enhanced forest inventories.\n\n::: info-box\n**`sgsR`** stands for **s**tructurally **g**uided **s**ampling implemented in **R**\n\n<ul>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>Provides stratification and sampling algorithms to guide primarily *model-based* sampling approaches\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>[Package website](https://tgoodbody.github.io/sgsR/)\n\n</li>\n\n<li>\n\n<i class=\"fa-solid fa-bowl-food\"></i>Funded by the **Canadian Wood Fibre Centre**\n\n</li>\n\n</ul>\n:::\n\n## Overview {background-color=\"#356734\"}\n\n::: incremental\n-   Brief inventory and sampling overview\n\n-   Discuss using auxiliary variables within sampling frameworks\n\n-   Structurally guided sampling using Airborne Laser Scanning\n\n-   **`sgsR`** overview\n\n-   Programmatic examples of the package\n:::\n\n# [🌲🌳 Forest inventories]{style=\"float:center;text-align:center;\"} {background-color=\"#356734\"}\n\n## 🌲🌳 Forest inventories\n\n**Purpose:** Obtain knowledge about the population (forest area) under investigation and provide estimates of specific target variables.\n\n::: {.fragment .fade-up}\n**Needed information:** Defined by the scope & scale of the inventory. Answered by questions like:\n:::\n\n::: {.fragment .fade-up}\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>Who/what is the information for? (e.g. Reporting obligations, timber production)\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>How big of an area are we inventorying? (e.g. National level, operational level)\n\n</li>\n\n</ul>\n:::\n:::\n\n::: {.fragment .fade-up}\n-   Answers dictate the sampling approaches to fulfill inventory obligations and objectives.\n:::\n\n# [🚩 Sampling]{style=\"float:center;text-align:center;\"} {background-color=\"#356734\"}\n\n## 🚩 Sampling\n\n::: {.fragment .fade-up}\n<center>\n\n***Mensuration is a cornerstone of forest management.***\n\n</center>\n:::\n\n::: {.fragment .fade-up}\n-   Sampling drives accurate forest attribute estimates (e.g. forest area, stem volume).\n:::\n\n::: {.fragment .fade-up}\n::: info-box\nSampling can be:\n\n<ul>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>Labour intensive\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Logistically challenging\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>**Expensive**\n\n</li>\n\n</ul>\n:::\n:::\n\n::: {.fragment .fade-up}\n-   We want to balance these challenges with attribute estimate accuracy\n:::\n\n::: {.fragment .fade-up}\n-   Many sampling methods, but traditional and commonly used examples include:\n:::\n\n# [🎲📊 Probability-based sampling]{style=\"float:center;text-align:center;\"} {background-color=\"#356734\"}\n\n## 🎲 Random sampling\n\n-   Randomized sampling where probabilities for each sample unit can be equivalent and known.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#--- simple random sampling ---#\nsample_srs(raster = mr, nSamp = 100, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n## 🟩 Systematic sampling\n\n-   Systematic sampling methods are also common, where sample units are selected based on a defined distance.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#--- systematic sampling ---#\nsample_systematic(raster = mr, cellsize = 1000, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n## 🟩 Systematic sampling {auto-animate=\"true\"}\n\n-   Different tessellation shapes are common.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#--- systematic sampling in hexagons ---#\nsample_systematic(raster = mr, cellsize = 1000, square = FALSE, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n## 🟩 Systematic sampling {auto-animate=\"true\"}\n\n-   And combinations of systematic and simple random sampling also exists\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#--- systematic random sampling ---#\nsample_systematic(raster = mr, cellsize = 1000, \n                  square = FALSE, location = \"random\", plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n## 🎲📊 Probability-based sampling\n\n-   We now understand a bit more about probability based sampling:\n\n::: {.fragment .fade-up}\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>Randomized\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Probability of sampling each unit is equal, known, or can be known\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Different methods exist (e.g. simple random, systematic)\n\n</li>\n\n</ul>\n:::\n:::\n\n::: {.fragment .fade-up}\n-   What about using remote sensing data to help guide sampling?\n:::\n\n# [🛰👩🏻‍💻 Auxiliary data]{style=\"float:center;text-align:center;\"} {background-color=\"#356734\"}\n\n## 👩🏻‍💻 Auxiliary data\n\n-   Probability-based sampling does not leverage auxiliary data such as:\n\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>Imagery (satellite, airborne, drone)\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Feature-based inventories\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>ALS metrics (height, cover, variability)\n\n</li>\n\n</ul>\n:::\n\n::: {.fragment .fade-up}\n-   Auxiliary data as *a-priori* information to guide *model-based* sampling has been fruitful.\n:::\n\n# [💠🔢 Stratification]{style=\"float:center;text-align:center;\"} {background-color=\"#356734\"}\n\n## 💠🔢 Stratification\n\n<center>\n\n*\"Our results highlight that [LiDAR data integrated with field data sampling designs can provide broad-scale assessments of vegetation structure and biomass]{style=\"color:red\"}, i.e., information crucial for carbon and biodiversity science.\"* [(Hawbaker et al., 2009)](https://doi.org/10.1029/2008JG000870)\n\n</center>\n\n![](images/sgs.png){fig-align=\"center\"}\n\n## 💠🔢 Stratification\n\n<center>\n\n*\"The ALS data also provides an [excellent source of prior information]{style=\"color:red\"} that may be used in the [design phase of the field survey to reduce the size of the field data set.\"]{style=\"color:red\"}* [(Gobakken et al., 2013)](http://dx.doi.org/10.14214/sf.943)\n\n</center>\n\n![](images/sgs2.png){fig-align=\"center\" width=\"716\"}\n\n## 💠🔢 Stratification - [1]{.circle} metric {auto-animate=\"true\"}\n\n-   Replicating these (and other) approaches can be done in a simple manner\n\n``` r\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mr$zq90, # p90\n                           nStrata = 5) # 5 strata in p90\n```\n\n## 💠🔢 Stratification - [1]{.circle} metric {auto-animate=\"true\"}\n\n-   Replicating these (and other) approaches can be done in a simple manner\n\n``` {.r code-line-numbers=\"2\"}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mr$zq90, # p90\n                           nStrata = 5) # 5 strata in p90\n```\n\n## 💠🔢 Stratification - [1]{.circle} metric {auto-animate=\"true\"}\n\n-   Replicating these (and other) approaches can be done in a simple manner\n\n``` {.r code-line-numbers=\"2-3\"}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mr$zq90, # p90\n                           nStrata = 5) # 5 strata in p90\n```\n\n::: {.fragment .fade-up}\n![](images/strat_1.png){fig-align=\"center\"}\n:::\n\n## 💠🔢 Stratification - [2]{.circle} metrics {auto-animate=\"true\"}\n\n-   Replicating these (and other) approaches can be done in a simple manner\n\n``` r\n#--- perform dual metric stratification ---#\nsraster <- strat_quantiles(mraster = mr$zq90, # p90\n                           mraster2 = mr$zsd, # standard deviation of height\n                           nStrata = 10, # 10 strata in p90\n                           nStrata2 = 3) # 3 strata in zsd\n```\n\n## 💠🔢 Stratification - [2]{.circle} metrics {auto-animate=\"true\"}\n\n-   Replicating these (and other) approaches can be done in a simple manner\n\n``` {.r code-line-numbers=\"2,4\"}\n#--- perform dual metric stratification ---#\nsraster <- strat_quantiles(mraster = mr$zq90, # p90\n                           mraster2 = mr$zsd, # standard deviation of height\n                           nStrata = 10, # 10 strata in p90\n                           nStrata2 = 3) # 3 strata in zsd\n```\n\n## 💠🔢 Stratification - [2]{.circle} metrics {auto-animate=\"true\"}\n\n-   Replicating these (and other) approaches can be done in a simple manner\n\n``` {.r code-line-numbers=\"3,5\"}\n#--- perform dual metric stratification ---#\nsraster <- strat_quantiles(mraster = mr$zq90, # p90\n                           mraster2 = mr$zsd, # standard deviation of height\n                           nStrata = 10, # 10 strata in p90\n                           nStrata2 = 3) # 3 strata in zsd\n```\n\n::: {.fragment .fade-up}\n![](images/strat_2.png){fig-align=\"center\"}\n:::\n\n## 🎯 Structurally guided sampling {.smaller auto-animate=\"true\"}\n\n-   Now that we have stratified our ALS data - we can sample within it!\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mr$zq90, # p90\n                           mraster2 = mr$zsd, # standard deviation of height\n                           nStrata = 10, # 10 strata in p90\n                           nStrata2 = 3) # 3 strata in zsd\n\n#--- structurally guided stratified sampling ---#\nsample_strat(sraster = sraster, nSamp = 100, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n# [`sgsR`]{style=\"float:center;text-align:center;\"} {background-color=\"#356734\"}\n\n![](images/logo.png){fig-align=\"center\"}\n\n## `sgsR` purpose <img src=\"images/logo.png\" height=\"120px\" style=\"vertical-align:middle;\"/> {.smaller}\n\n**`sgsR`** is a toolbox for practitioners to leverage these benefits to provide primarily *model-based* sampling approaches for forest inventories that are.\n\n::: {.fragment .fade-up}\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Transparent\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Repeatable\n\n</li>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>Tuneable\n\n</li>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>Spatially-explicit\n\n</li>\n\n</ul>\n:::\n:::\n\n## Algorithm structure <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"images/logo.png\" height=\"120px\" style=\"vertical-align:middle;\"/> {.smaller}\n\n::: incremental\n-   **`sgsR`** was built using the `terra`, `sf`, & `tidyverse` packages\n\n-   There are 4 primary function verbs that **`sgsR`** uses:\n:::\n\n::: {.fragment .fade-up}\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>`strat_*` - apply stratification to metrics raster (mraster) and output a stratified raster (sraster)\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>`sample_*` - allocate samples using srasters produced from strat\\_\\* functions.\n\n</li>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>`calculate_*`- calculate sample information or create useful intermediary sampling products.\n\n</li>\n\n<li>\n\n<i class=\"fa-solid fa-bullseye\"></i>`extract_*` - extract pixels values from rasters to samples\n\n</li>\n\n</ul>\n:::\n:::\n\n::: {.fragment .fade-up}\n![](images/flow-01.png){fig-align=\"center\" width=\"438\"}\n:::\n\n## {background-color=\"#356734\"}\n\n![`sgsR` overview](images/flow.png){fig-align=\"center\" }\n\n\n# [Example 1]{.story} 🌱 [Stratified sampling constrained by access]{style=\"float:right;text-align:right;\"} {background-color=\"#356734\"}\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access\n\n1️⃣ Read in some ALS metrics\n\n``` {.r code-line-numbers=\"1,3,5,6\"}\n#--- Stratification ---#\n#--- Load ALS metrics from sgsR internal data ---#\nr <- system.file(\"extdata\", \"mraster.tif\", package = \"sgsR\")\n\n#--- Read ALS metrics using the terra package ---#\nmraster <- terra::rast(r)\n```\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access\n\n1️⃣ Read in some ALS metrics\n\n``` {.r code-line-numbers=\"6\"}\n#--- Stratification ---#\n#--- Load ALS metrics from sgsR internal data ---#\nr <- system.file(\"extdata\", \"mraster.tif\", package = \"sgsR\")\n\n#--- Read ALS metrics using the terra package ---#\nmraster <- terra::rast(r)\n```\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate=\"true\"}\n\n2️⃣ Read in a linear road `access` network.\n\n``` {.r code-line-numbers=\"4-5\"}\n#--- Load access network from sgsR internal data ---#\na <- system.file(\"extdata\", \"access.shp\", package = \"sgsR\")\n\n#--- load the access vector using the sf package ---#\naccess <- sf::st_read(a)\n```\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate=\"true\"}\n\n3️⃣ Stratify `p90` in to 4 strata based on quantiles.\n\n``` r\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90\n                           nStrata = 4) # desired number of strata (4)\n```\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate=\"true\"}\n\n4️⃣ Now lets use the `sraster` output.\n\n``` {.r code-line-numbers=\"6\"}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90\n                           nStrata = 4) # desired number of strata (4)\n\n#--- perform sampling ---#\nsamples <- sample_strat(sraster = sraster, \n                        nSamp = 100, \n                        access = access, \n                        buff_inner = 50, \n                        buff_outer = 400)\n```\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate=\"true\"}\n\n5️⃣ Request 100 proportionally allocated samples.\n\n``` {.r code-line-numbers=\"6-7\"}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90\n                           nStrata = 4) # desired number of strata (4)\n\n#--- perform sampling ---#\nsamples <- sample_strat(sraster = sraster, \n                        nSamp = 100, \n                        access = access, \n                        buff_inner = 50, \n                        buff_outer = 400)\n```\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate=\"true\"}\n\n6️⃣ Bring in the `access` road.\n\n``` {.r code-line-numbers=\"6-8\"}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90\n                           nStrata = 4) # desired number of strata (4)\n\n#--- perform sampling ---#\nsamples <- sample_strat(sraster = sraster, \n                        nSamp = 100, \n                        access = access, \n                        buff_inner = 50, \n                        buff_outer = 400)\n```\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate=\"true\"}\n\n7️⃣ Specify we dont want samples within 50 m of `access`.\n\n``` {.r code-line-numbers=\"6-9\"}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90\n                           nStrata = 4) # desired number of strata (4)\n\n#--- perform sampling ---#\nsamples <- sample_strat(sraster = sraster, \n                        nSamp = 100, \n                        access = access, \n                        buff_inner = 50, \n                        buff_outer = 400)\n```\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate=\"true\"}\n\n8️⃣ Or further than 400 m from `access`.\n\n``` {.r code-line-numbers=\"6-10\"}\n#--- perform stratification ---#\nsraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90\n                           nStrata = 4) # desired number of strata (4)\n\n#--- perform sampling ---#\nsamples <- sample_strat(sraster = sraster, \n                        nSamp = 100, \n                        access = access, \n                        buff_inner = 50, \n                        buff_outer = 400)\n```\n\n## [Example 1]{.story} 🌱 Stratified sampling constrained by access {.smaller}\n\n![](images/example1.png){fig-align=\"center\"}\n\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Mapped result **(A)** and plotted result **(B)**.\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Note buffered `access` in **A**. Points are samples in both **A** & **B**.\n\n</li>\n\n</ul>\n:::\n\n## [Example 1]{.story} 🌱 Comparing distributions\n\n-   When constraining by `access` its important to make sure that you're still sampling the entire distribution of metrics.\n\n![](images/accesscompare.png){fig-align=\"center\"}\n\n# [Example 2]{.story} 🌿 [Augmenting an `existing` sample]{style=\"float:right;text-align:right;\"} {background-color=\"#356734\"}\n\n## 🌿 Augmenting an `existing` sample {background-color=\"#356734\"}\n\n<center>\n\n*\"I have an existing sample network, can I use those same sample locations?\"* <br></br> *\"If I go and visit those same sample units, where should I locate new samples for structural representation?\"*\n\n</center>\n\n![](images/density.png){fig-align=\"center\"}\n\n## [Example 2]{.story} 🌿 Augmenting an `existing` sample {.smaller}\n\n-   Lets create an `existing` sample of 50 plots using simple random sampling (`sample_srs`).\n\n-   We are assuming these have been measured or used previously and can be revisited.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(2022)\n#--- simple random sampling ---#\nexisting <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n## [Example 2]{.story} 🌿 Augmenting an `existing` sample {.smaller}\n\n*Adapted Hypercube Evaluation of a Legacy Sample (AHELS)* [(Malone, Minansy & Brungard, 2019).](https://peerj.com/articles/6451/)\n\n::: info-box\n`sample_ahels()` works by:\n\n<ul>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Determining representation of `existing` sample.\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Generate quantile and covariance matrix of ALS metrics.\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Determining number of additional samples that can / need to be added\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Identify where new samples are needed to balance quantile density and sampling density.\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Iteratively locate samples.\n\n</li>\n\n</ul>\n:::\n\n## [Example 2]{.story} 🌿 Augmenting an `existing` sample\n\n1️⃣ We have our `existing` sample\n\n``` {.r code-line-numbers=\"1-2\"}\n#--- simple random sampling ---#\nexisting <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)\n```\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n## [Example 2]{.story} 🌿 Augmenting an `existing` sample\n\n2️⃣ Now we can use the `sample_ahels()` algorithm with our ALS metrics.\n\n``` {.r code-line-numbers=\"5-6\"}\n#--- simple random sampling ---#\nexisting <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)\n\n#--- augment sample network using sample_ahels ---#\n#--- perform ahels sampling ---#\nsample_ahels(mraster = mr,\n             existing = existing,\n             nSamp = 50)\n```\n\n## [Example 2]{.story} 🌿 Augmenting an `existing` sample\n\n3️⃣ Specify our `existing` sample.\n\n``` {.r code-line-numbers=\"5-7\"}\n#--- simple random sampling ---#\nexisting <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)\n\n#--- augment sample network using sample_ahels ---#\n#--- perform ahels sampling ---#\nsample_ahels(mraster = mr,\n             existing = existing,\n             nSamp = 50)\n```\n\n## [Example 2]{.story} 🌿 Augmenting an `existing` sample\n\n4️⃣ And specify we want 50 new sample units (`nSamp`).\n\n``` {.r code-line-numbers=\"5-8\"}\n#--- simple random sampling ---#\nexisting <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)\n\n#--- augment sample network using sample_ahels ---#\n#--- perform ahels sampling ---#\nsample_ahels(mraster = mr,\n             existing = existing,\n             nSamp = 50)\n```\n\n## [Example 2]{.story} 🌿 Augmenting an `existing` sample\n\n![](images/e2s.png){fig-align=\"center\"}\n\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Mapped result **(A)** and plotted result **(B)**.\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>Note ratios (black/red) and additional added samples e.g [*n = 2*]{style=\"color:red\"} for each stratum.\n\n</li>\n\n</ul>\n:::\n\n## `sample_ahels()` result\n\n![](images/hist.png){fig-align=\"center\"}\n\n::: info-box\n<ul>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>`existing` only **(A)** and addition of new samples **(B)**.\n\n</li>\n\n<li>\n\n<i class=\"fa-brands fa-github\"></i>We see that metric and sample density become quite even - structurally representative.\n\n</li>\n\n</ul>\n:::\n\n## Summary <img src=\"images/logo.png\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\n::: {.fragment .fade-in}\n-   Structurally guided sampling methods show promise for *model-based* sampling.\n:::\n\n::: {.fragment .fade-in}\n-   The **`sgsR`** package provides many methods to implement SGS approaches.\n:::\n\n::: {.fragment .fade-in}\n-   We presented a few examples of **`sgsR`** functionality.\n:::\n\n::: {.fragment .fade-in}\n-   If interested - come and talk to me & use the link on the slides more info!\n:::\n\n# [🤲🤝🙏 Thank you!]{style=\"float:center;text-align:center;\"} {background-color=\"#356734\"}\n\n<center>\n\nSpecial thanks to the Canadian Wood Fibre Centre for funding this research!\n\n</center>\n\n## 🤲🤝🙏 Thank you! {font-size=\"30em\"}\n\n<center>\n\n***My Twitter: [\\@GoodbodyT](https://twitter.com/GoodbodyT)***\n\n***IRSS Twitter: [\\@IRSS_UBC](https://twitter.com/IRSS_UBC)***\n\n</center>\n\n<center>\n\n::: info-box\n***Collaborators***\n\n::: columns\n::: {.column width=\"30%\"}\n-   Martin Queinnec\n-   Joanne White\n-   Andrew Hudak\n-   Ruben Valbuena\n-   Murray Woods\n-   David Auty\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"30%\"}\n-   Antoine Leboeuf\n-   Ian Sinclair\n-   Grant McCartney\n-   Jean-Francois Prieur\n-   Piotr Tompalski\n:::\n:::\n\n:::\n\n</center>\n\n## 🤲🤝🙏 Thank you!\n\n![](images/affiliations.png)",
    "supporting": [
      "presentation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}