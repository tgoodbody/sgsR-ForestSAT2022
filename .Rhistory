sgsR::sample_systematic(raster = studyarea, cellsize = 1000, plot = TRUE)
library(sgsR)
library(terra)
library(sf)
#--- Load raster and access files ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
studyarea <- terra::rast(r)
sgsR::sample_systematic(raster = studyarea, cellsize = 1000, plot = TRUE)
library(sgsR)
library(terra)
library(sf)
#--- Load raster and access files ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
studyarea <- terra::rast(r)
sgsR::sample_systematic(raster = studyarea, cellsize = 500, plot = TRUE)
#| echo: false
#| warning: false
#| results: hide
library(sgsR)
#--- Load raster and access files ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mraster <- terra::rast(r)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(
mraster = mraster,
nStrata = 5, # number of desired strata
algorithm = "MacQueen", # specify kmeans algorithm
plot = TRUE
)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform stratification using k-means ---#
sraster <- strat_quantiles(
mraster = mr$zq90, # input ALS metric - 90th percentile of height
nStrata = 5, # desired number of strata
details = TRUE # specify if additional information should be given
)
#--- plot output stratifcation ---#
terra::plot(sraster$raster)
devtools::install_github("https://github.com/tgoodbody/sgsR")
library(sgsR)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform quantile stratification of 90th percentile height ---#
sraster <- strat_quantiles(
mraster = mr$zq90, # input ALS metric - 90th percentile height
nStrata = 5, # desired number of strata
details = TRUE
)
sraster
sraster$details
#| echo: true
#| warning: false
#| results: asis
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform quantile stratification of 90th percentile height ---#
sraster <- strat_quantiles(
mraster = mr$zq90, # input ALS metric - 90th percentile height
nStrata = 5, # desired number of strata
plot = TRUE,
details = TRUE
)
sraster$details$plot
sraster
#| warning: false
#| echo: false
#| results: markup
#--- perform stratified sampling random sampling ---#
sample_strat(
sraster = sraster,
nSamp = 200,
plot = TRUE
)
sraster
#| echo: false
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform quantile stratification of 90th percentile height ---#
sraster <- strat_quantiles(
mraster = mr$zq90, # input ALS metric - 90th percentile height
nStrata = 5 # desired number of strata
)
#| warning: false
#| echo: true
#| results: hide
#--- perform stratified sampling random sampling ---#
samples <- sample_strat(
sraster = sraster,
nSamp = 200,
plot = TRUE
)
s <- sample_strat(
sraster = sraster, # quantiles stratification sraster
nSamp = 200, # number of desired samples
allocation = "prop", # allocation type (proportional, optimal, equal, manual)
mindist = 100, # minimum distance requred between samples.
details = TRUE
)
#--- perform stratified random sampling ---#
sample_strat(
sraster = sraster, # quantiles stratification sraster
nSamp = 200, # number of desired samples
plot = TRUE
)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform quantile stratification of 90th percentile height ---#
sraster <- strat_quantiles(
mraster = mr$zq90, # input ALS metric - 90th percentile height
nStrata = 5, # desired number of strata
details = TRUE
)
library(sgsR)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform quantile stratification of 90th percentile height ---#
sraster <- strat_quantiles(
mraster = mr$zq90, # input ALS metric - 90th percentile height
nStrata = 5, # desired number of strata
details = TRUE
)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform quantile stratification of 90th percentile height ---#
sraster <- strat_quantiles(
mraster = mr$zq90, # input ALS metric - 90th percentile height
nStrata = 5, # desired number of strata
details = TRUE, plot = TRUE
)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- simple random sampling ---#
sample_srs(raster = mraster, nSamp = 100, plot = TRUE)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
#--- simple random sampling ---#
sample_srs(raster = mr, nSamp = 100, plot = TRUE)
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
#--- simple random sampling ---#
#--- simple random sampling ---#
existing <- sample_srs(raster = mraster, nSamp = 50)
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
invisible(suppressPackageStartupMessages(
lapply(c("tidyverse", "terra", "sf"), library, character.only = TRUE)))
# Load custom DSMART files
source("./_functions/dsmart_custom/dsmart.R")
AOI <- "F:/_2021_SSCALS/modelling/_modeldevel/data/AOI/sechelt_aoi.gpkg"
covariates <- "F:/_2021_SSCALS/modelling/_modeldevel/data/_all/covariates"
poi <- c("RUBUSPE", "CORNCAN") # plants of interest
map_res <- 20
include_bgc <- FALSE
use_caret <- TRUE
run <- "site_ser" # option of "struct_stg" or "site_ser"
map_res_id <- c(
paste0(suppressWarnings(map_res[!is.na(as.numeric(map_res))]), "m"),
suppressWarnings(map_res[is.na(as.numeric(map_res))]))
shapes_dir <- "F:/_2021_SSCALS/modelling/_modeldevel/data/AOI"
dsmart_dir <- "F:/_2021_SSCALS/modelling/_modeldevel/DSMART"
# Load covariates
files <- list.files("F:/_2021_SSCALS/modelling/_modeldevel/data/covariates/_dsmart", full.names = TRUE)
covariates <- terra::rast(files)
# Load the polygons and associated observations
polygons <- terra::vect("F:/_2021_SSCALS/modelling/_modeldevel/DSMART/dsmart_site_ser_polys.gpkg")
if(include_bgc) {
bgc <- st_read(file.path(shapes_dir, "bec.gpkg"), quiet = TRUE) %>%
mutate(MAP_LABEL = as.factor(MAP_LABEL),
bgc = as.numeric(as.factor(MAP_LABEL)))
tem_geom <- st_geometry(bgc)
# Fix geometries that aren't polygon/multipolygon
for(i in 1:length(tem_geom)) {
if(!st_geometry_type(tem_geom[[i]]) %in% c("POLYGON", "MULTIPOLYGON"))
tem_geom[[i]] <- st_collection_extract(tem_geom[[i]], "POLYGON") %>%
st_multipolygon()
}
st_geometry(bgc) <- st_cast(tem_geom, "MULTIPOLYGON")
level_table <- unique.data.frame(data.frame(
label = as.character(bgc$MAP_LABEL),
value = as.numeric(bgc$MAP_LABEL)))
bgc_rast <- as.factor(terra::rasterize(vect(bgc), covariates[[1]], field = "bgc"))
levels(bgc_rast) <- level_table
# File needs to be written to disk and then reloaded back into R for proper
# feature assignments
bgc_rast <- writeRaster(bgc_rast, file.path(dsmart_dir, "inputs", "bgc.tif"),
overwrite = TRUE, wopt = list(datatype = "INT2S"))
covariates <- c(covariates, bgc_rast)
factors <- "bgc"
} else {
factors <- NULL
}
# Load TEM composition and additional observations
composition <- read.csv("F:/_2021_SSCALS/modelling/_modeldevel/DSMART/dsmart_site_ser_composition.csv") %>%
dplyr::select(-Subzone)
observations <- read.csv("F:/_2021_SSCALS/modelling/_modeldevel/DSMART/dsmart_site_ser_observations.csv") %>%
dplyr::select(any_of(c("X", "Y", "MapUnit", "StructuralStage")))
dsm_data <- list(
dsmart_dir = dsmart_dir,
covariates = covariates,
polygons = polygons,
composition = composition,
observations = observations,
factors = factors)
if(run == "site_ser") {
covariates <- dsm_data[["covariates"]]
composition <- dsm_data[["composition"]]
if(dir.exists(file.path(dsmart_dir, "simple")))
unlink(file.path(dsmart_dir, "simple"), recursive = TRUE)
dir.create(file.path(dsmart_dir, "simple"), showWarnings = FALSE)
# Rasterize first calls only
cov_sub <- subset(covariates, "dtm20_1")
tem <- terra::vect(file.path(dsmart_dir, paste0("dsmart_", run, "_polys.gpkg")))
tem$MapUnit1_num <- as.numeric(as.factor(tem$MapUnit1))
tem_rast <- terra::rasterize(tem, cov_sub, field = "MapUnit1_num",
filename = file.path(dsmart_dir, "simple", "site_series_simple.tif"),
overwrite = TRUE)
tem_rast_index <- data.frame(name = tem$MapUnit1, code = tem$MapUnit1_num) %>%
unique() %>%
arrange(code)
write.table(tem_rast_index, file.path(dsmart_dir, "simple", "site_ser_simple_lookup.txt"),
row.names = FALSE, quote = FALSE, sep = ",")
# Generate probabilities based on composition
ss_calls <- unique(composition$MapUnit)
composition_remake <- dplyr::bind_rows(lapply(unique(composition$POLY_NO), function(i) {
composition %>% dplyr::filter(POLY_NO == i) %>%
dplyr::select(POLY_NO, MapUnit, proportion) %>%
rbind(data.frame(
POLY_NO = .$POLY_NO[1],
MapUnit = ss_calls[!ss_calls %in% .$MapUnit],
proportion = 0
))
}))
tem_remake <- values(tem) %>%
dplyr::select(POLY_NO) %>%
merge(composition_remake) %>%
mutate(proportion = proportion / 100) %>%
merge(tem, .)
tem_props <- rast(lapply(unique(tem_remake$MapUnit), function(i) {
tem_remake[tem_remake$MapUnit == i] %>%
stats::setNames(c(names(.)[names(.) != "proportion"], paste0("probability_", i))) %>%
rasterize(cov_sub, field = paste0("probability_", i), overwrite = TRUE,
filename = file.path(dsmart_dir, "simple", paste0("probability_", i, ".tif")))
}))
tem_rast <- list(class = tem_rast, props = tem_props, class_index = tem_rast_index)
}
invisible(suppressPackageStartupMessages(
lapply(c("tidyverse", "readxl", "svSocket", "RODBC", "sf", "terra"),
library, character.only = TRUE, quietly = TRUE)))
AOI <- "F:/_2021_SSCALS/modelling/_modeldevel/data/AOI/sechelt_aoi.gpkg"
covariates <- "F:/_2021_SSCALS/modelling/_modeldevel/data/_all/covariates"
poi <- c("RUBUSPE", "CORNCAN") # plants of interest
spreadsheet <- "F:/_2021_SSCALS/modelling/_modeldevel/field_data/fieldplots_20220530.xlsx"
sheets <- excel_sheets(spreadsheet)
removed <- c("SH17","SH31","TZ015","TZ025","TZ030","TZ034","SP227","SP230","SP231","SP-339","Op019_2020","CDC0239","CDC0294","CDC1007","CDC1130","VRI1114")
# Load BEC information
sechelt_bec <- read_excel(spreadsheet, sheet = "CompiledSite") %>%
dplyr::rename(subzone = `BGCSubzoneVariant`, point_id = `Point ID`) %>%
dplyr::filter(subzone != "MHmm1" | subzone != "CDFmm" ) %>%
dplyr::filter(!point_id %in% removed) %>%
stats::setNames(make.names(names(.))) %>%
dplyr::mutate(MapUnit = ifelse(is.na(Site.Series), Nonforested.Class,
paste0(subzone, ".", Site.Series))) %>%
st_as_sf(coords = c("Long", "Lat"), crs = 4326, remove = FALSE) %>%
st_transform(3005)
sechelt_plants <- read_excel(spreadsheet, sheet = "CompiledVegNEWCODES")
sechelt_plants$A1 <- as.numeric(sechelt_plants$A1)
sechelt_plants$A2 <- as.numeric(sechelt_plants$A2)
sechelt_plants$A3 <- as.numeric(sechelt_plants$A3)
sechelt_plants$B1 <- as.numeric(sechelt_plants$B1)
sechelt_plants$B2 <- as.numeric(sechelt_plants$B2)
sechelt_plants$C <- as.numeric(sechelt_plants$C)
sechelt_plants$D <- as.numeric(sechelt_plants$D)
sechelt_plants <- sechelt_plants %>%
dplyr::mutate(
Cover = rowSums(.[, c("A1", "A2", "A3", "B1", "B2", "C", "D")], na.rm = TRUE),
Species = ifelse(nchar(SpeciesCurrentCode) > 2, toupper(SpeciesCurrentCode), SpeciesCurrentCode)) %>%
dplyr::mutate(Pres = Cover > 0) %>%
dplyr::filter(Comments != "*not recorded" | is.na(Comments)) %>%
dplyr::rename(point_id = `Point ID`) %>%
dplyr::filter(point_id %in% sechelt_bec$point_id) %>%
left_join(sechelt_bec, by = "point_id", suffix = c("", ".y")) %>%
dplyr::select(point_id, Species, MapUnit, Lat, Long, A1, A2, A3, B1, B2, C, D,
Flowers, Fruit, Pres, Cover, Comments) %>%
st_as_sf(coords = c("Long", "Lat"), crs = 4326) %>%
st_transform(3005)
# Create separate sf dataframes for each species in the spreadsheet
sechelt_pres_cov <- sapply(unique(sechelt_plants$Species), function(x)
dplyr::filter(sechelt_plants, Species == x) %>%
dplyr::select(-Species), simplify = FALSE, USE.NAMES = TRUE)
non_veg <- expand.grid(
site_series = "00",
map_code = c("GC", "GP", "LA", "OW", "PD", "RO", "RZ", "TA", "UR"))
# Load TEM polygons and remove columns where all values are NA
tem_sf <- st_read("F:/_2021_SSCALS/modelling/TEM/TEM/TEM_clip/TEM_clip_subset_2.shp") %>%
Filter(function(x) !all(is.na(x)), .)
tem_sf_dissolve <- tem_sf %>% st_union() %>% st_write("F:/_2021_SSCALS/modelling/_modeldevel/data/AOI/sechelt_aoi.gpkg")
# TEM polygon processing as a DSMART input
dsmart_site_ser_polys <- dplyr::rename(
tem_sf,
Subzone = BGC_SUB,
MapUnit1 = SITE_S1,
MapUnit2 = SITE_S2,
MapUnit3 = SITE_S3,
Sdec1 = SDEC_1,
Sdec2 = SDEC_2,
Sdec3 = SDEC_3,
NFMapUnit1 = SITEMC_S1,
NFMapUnit2 = SITEMC_S2,
NFMapUnit3 = SITEMC_S3,
MAP_CODE = OBJECTI) %>%
dplyr::select(
MAP_CODE, Subzone, starts_with(c("Sdec", "MapUnit", "NFMApUnit"))) %>%
drop_na(MapUnit1) %>%
dplyr::mutate(
across(c(NFMapUnit1, NFMapUnit2, NFMapUnit3), ~ sub("WE", "OW", .x)),
across(c(Sdec1, Sdec2, Sdec3), ~ .x * 10)) %>%
dplyr::mutate(
MapUnit1 = ifelse(MapUnit1 == "00" & NFMapUnit1 %in% non_veg$map_code,
as.character(NFMapUnit1), ifelse(
MapUnit1 == "00",
paste0(Subzone, "/", as.character(NFMapUnit1)),
paste0(Subzone, "/", MapUnit1))),
MapUnit2 = ifelse(MapUnit2 == "00" & NFMapUnit2 %in% non_veg$map_code,
as.character(NFMapUnit2), ifelse(
MapUnit2 == "00",
paste0(Subzone, "/", as.character(NFMapUnit2)),
paste0(Subzone, "/", MapUnit2))),
MapUnit3 = ifelse(MapUnit3 == "00" & NFMapUnit3 %in% non_veg$map_code,
as.character(NFMapUnit3), ifelse(
MapUnit3 == "00",
paste0(Subzone, "/", as.character(NFMapUnit3)),
paste0(Subzone, "/", MapUnit3))),
POLY_NO = as.integer(sub(".*_", "", MAP_CODE))) %>%
replace_na(list(MapUnit1 = "0", MapUnit2 = "0", MapUnit3 = "0")) %>%
dplyr::mutate(
Sdec2 = ifelse(MapUnit2 == MapUnit3, Sdec2 + Sdec3, Sdec2),
Sdec3 = ifelse(MapUnit2 == MapUnit3, NA, Sdec3),
MapUnit3 = ifelse(MapUnit2 == MapUnit3, 0, MapUnit3)) %>%
dplyr::mutate(
Sdec1 = ifelse(MapUnit1 == MapUnit3, Sdec1 + Sdec3, Sdec1),
Sdec3 = ifelse(MapUnit1 == MapUnit3, NA, Sdec3),
MapUnit3 = ifelse(MapUnit1 == MapUnit3, 0, MapUnit3)) %>%
dplyr::mutate(
Sdec1 = ifelse(MapUnit1 == MapUnit2, Sdec1 + Sdec2, Sdec1),
Sdec2 = ifelse(MapUnit1 == MapUnit2, NA, Sdec2),
MapUnit2 = ifelse(MapUnit2 == MapUnit1, 0, MapUnit2)) %>%
dplyr::mutate(
MapUnit2 = na_if(MapUnit2, "0"),
MapUnit3 = na_if(MapUnit3, "0")) %>%
dplyr::mutate(
MapUnit2 = ifelse((is.na(MapUnit2) & !is.na(MapUnit3)), MapUnit3, MapUnit2),
MapUnit3 = ifelse(MapUnit2 == MapUnit3, NA, MapUnit3),
Sdec2 = ifelse((is.na(Sdec2) & !is.na(Sdec3)), Sdec3, Sdec2),
Sdec3 = ifelse(MapUnit2 == MapUnit3, NA, Sdec3)) %>%
dplyr::mutate(across(c(MapUnit1, MapUnit2, MapUnit3),
~as.factor(sub(".*NA\\.", NA, make.names(.x)))),
Subzone = as.factor(Subzone)) %>%
dplyr::select(
POLY_NO, Subzone, MAP_CODE, MapUnit1, Sdec1,
MapUnit2, Sdec2, MapUnit3, Sdec3) %>%
replace_na(list(Sdec1 = 0, Sdec2 = 0, Sdec3 = 0))
dsmart_site_ser_polys
tem_sf_dissolve
tem_sf_dissolve <- tem_sf %>% st_union() %>% st_write("F:/_2021_SSCALS/modelling/_modeldevel/data/AOI/sechelt_aoi.gpkg")
tem_sf_dissolve
tem_sf
unique(tem_sf$SITE_S1)
unique(tem_sf$SITE_S1)
t <- tem_sf$SITE_S1
t %>% summarise(n = n()) %>%
mutate(freq = n / sum(n))
t %>% group_by(SITE_S1) %>% summarise(n = n()) %>%
mutate(freq = n / sum(n))
t
dsmart_site_ser_polys
t <- dsmart_site_ser_polys$MapUnit1
t
t %>% group_by(MAPUnit1) %>% summarise(n = n()) %>%
mutate(freq = n / sum(n))
t %>% group_by(MAPUnit1) %>% summarise(n = n())
t %>% group_by(MAPUnit1)
t %>% summarise(n = n()) %>%
mutate(freq = n / sum(n))
library(dplyr)
t %>% summarise(n = n()) %>%
mutate(freq = n / sum(n))
t %>% group_by(MAPUnit1) %>% count()
t %>% as.character() %>% group_by(MAPUnit1) %>% count()
t
as.data.frame(t)
t <- as.data.frame(t)
names(t)
t %>% as.character() %>% group_by(MAPUnit1) %>% count()
t %>% as.character() %>% group_by(t) %>% count()
t %>% count()
t %>% group_by(t) %>% count()
t %>% summarise(n = n()) %>%
mutate(freq = n / sum(n))
t %>% group_by(t) %>% summarise(n = n()) %>%
mutate(freq = n / sum(n))
t %>% group_by(t) %>% summarise(n = n()) %>%
mutate(freq = n / sum(n)) %>% View()
unique(dsmart_site_ser_polys$Sdec1)
unique(dsmart_site_ser_polys$MapUnit2)
unique(dsmart_site_ser_polys$MapUnit3)
tdata.frame(d1=dsmart_site_ser_polys$MapUnit1, d2=dsmart_site_ser_polys$MapUnit2, d3=dsmart_site_ser_polys$MapUnit3)
t=data.frame(d1=dsmart_site_ser_polys$MapUnit1, d2=dsmart_site_ser_polys$MapUnit2, d3=dsmart_site_ser_polys$MapUnit3)
t
t %>% select(d1) %>% group_by(d1) %>% summarise(n = n()) %>%
+     mutate(freq = n / sum(n))
t %>% select(d1) %>% group_by(d1) %>% summarise(n = n()) %>% mutate(freq = n / sum(n))
t %>% select(d1) %>% group_by(d1) %>% summarise(n = n()) %>% mutate(freq = n / sum(n))
t %>% select(d2) %>% group_by(d2) %>% summarise(n = n()) %>% mutate(freq = n / sum(n))
t %>% select(d1) %>% group_by(d1) %>% summarise(n = n()) %>% mutate(freq = n / sum(n)) %>% View()
t %>% select(d2) %>% group_by(d2) %>% summarise(n = n()) %>% mutate(freq = n / sum(n)) %>% View()
t %>% select(d3) %>% group_by(d3) %>% summarise(n = n()) %>% mutate(freq = n / sum(n)) %>% View()
t %>% select(d3) %>% group_by(d3) %>% summarise(n = n()) %>% mutate(freq = n / sum(n)) %>% View()
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
###--- augment sample network using sample_ahels ---###
#--- perform ahels sampling ---#
samples <- sample_ahels(mraster = mr$zq90,
existing = existing,
nSamp = 50)
###--- augment sample network using sample_ahels ---###
#--- perform ahels sampling ---#
samples <- sample_ahels(mraster = mr$zq90,
existing = existing,
nSamp = 50,
details = TRUE)
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
samples <- sample_ahels(mraster = mr$zq90,
existing = existing,
nSamp = 50,
details = TRUE)
existing
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
library(sgsR)
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
library(sgsR)
library(terra)
library(sf)
r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
###--- augment sample network using sample_ahels ---###
#--- perform ahels sampling ---#
sample_ahels(mraster = mr$zq90,
existing = existing,
nSamp = 50,
details = TRUE)
###--- augment sample network using sample_ahels ---###
#--- perform ahels sampling ---#
sample_ahels(mraster = mr,
existing = existing,
nSamp = 50,
details = TRUE)
