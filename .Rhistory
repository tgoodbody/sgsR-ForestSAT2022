mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
###--- sampling ---###
set.seed(2022)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400,
plot = TRUE)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
###--- Stratification ---###
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90,
nStrata = 4,
plot = TRUE)
###--- sampling ---###
set.seed(2022)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400,
plot = TRUE)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
###--- Stratification ---###
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90,
nStrata = 5,
plot = TRUE)
###--- sampling ---###
set.seed(2022)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400,
plot = TRUE)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#######################
###--- Example 1 ---###
#######################
###--- Stratification ---###
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90,
nStrata = 5,
plot = TRUE)
###--- sampling ---###
set.seed(2022)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
###--- sampling ---###
set.seed(2024)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
###--- Stratification ---###
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90,
nStrata = 5,
plot = TRUE)
###--- sampling ---###
set.seed(1999)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
###--- sampling ---###
set.seed(2001)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
#######################
###--- Example 1 ---###
#######################
###--- Stratification ---###
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90,
nStrata = 5,
plot = TRUE)
###--- sampling ---###
set.seed(2001)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400,
plot = TRUE)
#######################
###--- Example 1 ---###
#######################
###--- Stratification ---###
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90,
nStrata = 5)
###--- sampling ---###
set.seed(2001)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400,
plot = TRUE)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(5))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
p90sd
#################################
#--- install & load packages ---#
#################################
#--- install packages if needed ---#
# install.packages(‘sgsR’)
# install.packages(‘terra’)
# install.packages(‘sf’)
# install.packages(‘ggplot2’)
# install.packages(‘dplyr’)
#--- load packages ---#
library(sgsR)
library(terra)
library(sf)
library(ggplot2)
library(dplyr)
#######################
###--- Example 1 ---###
#######################
###--- Stratification ---###
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90,
nStrata = 5)
###--- sampling ---###
set.seed(2001)
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
#--- perform sampling ---#
samples <- sample_strat(sraster = sraster,
nSamp = 100,
access = access,
buff_inner = 50,
buff_outer = 400,
plot = TRUE)
#--- extract ALS metrics to samples ---#
sample_metrics <- extract_metrics(mraster = mraster,
existing = samples)
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(5))) +
ggplot2::geom_point(data = sample_metrics, size = 1.3, colour = "#333333", shape = 1)
#--- compare cumulative frequency distributions between population and access constrained extent ---#
m <- sgsR::mask_access(raster = mraster, access = access, buff_inner = 50, buff_outer = 400)
#--- show historgrams ---#
terra::hist(m$rast$zq90)
terra::hist(mraster$zq90)
#--- constrained ---#
mbuff <- terra::values(m$rast) %>%
as.data.frame() %>%
dplyr::select(zq90, zsd) %>%
na.omit() %>%
dplyr::mutate(type = "access")
#--- population ---#
mrast <- terra::values(mraster) %>%
as.data.frame() %>%
dplyr::select(zq90, zsd) %>%
na.omit() %>%
dplyr::mutate(type = "full")
vals <- rbind(mbuff, mrast)
#--- zq90 ---#
ggplot2::ggplot(data = vals, aes(zq90, color = type)) +
ggplot2::stat_ecdf(geom = "step")
#--- zsd ---#
ggplot2::ggplot(data = vals, aes(zsd, color = type)) +
ggplot2::stat_ecdf(geom = "step")
#######################
###--- Example 2 ---###
#######################
###--- create existing sample network ---###
set.seed(2024)
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")
#--- read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
#--- simple random sampling ---#
existing <- sgsR::sample_srs(raster = mraster$zq90,
nSamp = 50)
###--- augment sample network using sample_ahels ---###
#--- perform ahels sampling ---#
samples <- sgsR::sample_ahels(mraster = mraster$zq90,
existing = existing,
nSamp = 100,
plot = TRUE,
details = TRUE)
###--- present sampling ratios from sample_ahels ---###
#--- sampling ratios before sample_ahels ---#
samples$details$existingRatio
#--- sampling ratios after sample_ahels ---#
samples$details$sampledRatio
#--- difference between before and after ratios ---#
samples$details$diffRatio
###--- create figures ---###
#--- generate metric distributions (occurs by default in algorithm)---#
mat <- sgsR::calculate_pop(mraster$zq90)
#--- extract zsd from mraster ---#
s <- samples$samples %>%
sgsR::extract_metrics(mraster = mraster[[3]], existing = .)
#--- generate stratification based on quantile breaks from mat ---#
sraster <- sgsR::strat_breaks(mraster$zq90,breaks = mat$matQ[2:9])
#--- combine mraster and sraster & rename variable to class ---#
smr <- c(sraster,mraster)
names(smr[[1]]) <- "class"
#--- create stratum breaks for plot ---#
coordsgrps <- smr %>%
as.data.frame() %>%
dplyr::group_by(class) %>%
dplyr::arrange(class) %>%
stats::na.omit() %>%
tidyr::nest() %>%
dplyr::ungroup()
#--- generate base scatter plot of metrics ---#
p90sd <- sgsR::classPlot(as.data.frame(smr),
coordsgrps = coordsgrps,
mraster = zq90,
mraster2 = zsd,
samp = 0.2) +
ggplot2::scale_color_manual(values = rev(terrain.colors(12)))
#--- separate existing ---#
s_ex <- s %>%
dplyr::filter(type == "existing")
#--- separate new ---#
s_new <- s %>%
dplyr::filter(type == "new")
#--- plot base scatter with new and existing sample units added ---#
p90 <- p90sd + ggplot2::labs(x= "90th percentile of height (m)",
y= "Standard deviation of height (m)") +
ggplot2::geom_point(data = s_ex, size = 1.3, colour = "#333333", shape = 1) +
ggplot2::geom_point(data = s_new, size = 1.3, colour = "red", shape = 3)
#--- generate representation plots for existing sample units only ---#
sgsR::calculate_representation(sraster, s_ex, plot = TRUE)
#--- generate representation plots for existing & new sample units ---#
sgsR::calculate_representation(sraster, s, plot = TRUE)
#--- determine number of sample units added per stratum ---#
sgsR::extract_strata(sraster, s_new) %>%
dplyr::group_by(strata) %>%
dplyr::tally()
