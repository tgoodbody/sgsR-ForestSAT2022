---
title: "`sgsR` - Structurally Guided Sampling"
author: "__Tristan Goodbody, PhD__"
title-slide-attributes:
  data-background-image: images/title_slide.jpg
  data-background-opacity: "0.4"
date: today
format:
  revealjs: 
    self-contained: true
    slide-number: true
    preview-links: auto
    logo: images/logo.png
    footer: <https://tgoodbody.github.io/sgsR/>
    progress: true
    multiplex: true
    width: 1280
    height: 720
    theme: [simple, assets/styles.scss]
    controls: true
    css: [assets/custom.css]
execute:
  echo: true
bibliography: references.bib
---

```{r include=FALSE}
library(sgsR)
library(terra)
library(sf)

r <- system.file("extdata", "mraster.tif", package = "sgsR")
mr <- terra::rast(r)

#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")
#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
```

## Overview {background-color="#356734"}

-   About me

    -   Background, skills, work experience, hobbies

-   Brief inventory and sampling overview

-   Discuss using auxiliary variables within sampling frameworks

-   Structurally guided sampling using Airborne Laser Scanning

-   **`sgsR`** overview

-   Programmatic examples of the package

# 🍁 About me

::: columns
::: column
-   Born in Calgary, Alberta (Texas of Canada)

-   Lived in Quito, ECU, Kuala Lumpur, MYS, Aberdeen, SCO

-   Studied Natural Resources Conservation at UBC

-   Worked as a forest engineer in Chetwynd and Williams Lake, BC

-   10 years experience in remote sensing, forest management
:::

::: column
![](images/tristan.png){fig-align="center" width="60%"}
:::
:::

# [👷🛠️🌳Skills and Work Experience]{style="float:center;text-align:center;"} {background-color="#356734"}

## Forest Carbon Due‑Diligence

-   Additionality, baselines, durability, and co‑benefits for removal/reduction carbon projects
-   Conducted due‑diligence on over 20 nature‑based carbon projects (e.g. Climate Action Reserve Mexico, Verra, Cercarbono)\

## Technical Communication

-   Bridging scientific / strategic concepts with practical applications
-   Interfaced science, and software teams to integrate scalable, high quality products
-   Acted as technical expert for client meeting to communicate remote sensing approaches

## Mentorship

-   Startup and academic experience in developing and promoting best‑practices
-   Scientific mentorship of graduate students, industry/government professionals
-   Lead team sessions on remote sensing approaches, promoting simplicity and reducing risk
-   Developed interactive documentation to develop internal remote sensing / carbon assessment  capacity
-   Onboarded new staff using self-made materials

## Data Management & Expertise

-   Lidar, satellite, airborne, drone, field‑measured, GIS data
-   Lead over 20 projects leading to high-quality scientific publication
-   Focus on operationalization - using remote sensing to make forest management more efficient and objective
-   Designed, implemented, and applied processing workflows for government and industrial partners (e.g. BC lidar)

## Geospatial Analysis & Computing
-   Familiar with R and Python
-   Statistical modelling and workflow optimization (e.g. timber attribute modelling, classifications)
-   Open-source software development
-   Forest Inventory Innovation
    -   Mapping, mensuration, and biometric approaches to achieve strategic and operational goals

## Field Work
-   Forest regeneration assessments
-   Timber cruising
-   Harvest Layout
-   Insect/Avian surveys
-   Seasoned Bear Spray User

## Languages
-   Spanish (intermediate)
-   German (basic)
-   Mandarin (basic)
 
## Core Work Experience

-   Developed Python packages to automate remote sensing workflows, analytics and carbon evaluation

-   Lead US federal grant writing efforts (\$10M & \$1.9M)





## 🐕 🥑 Hobbies

::: columns
::: {.column width="30%"}
-   Dog Training

-   Photography

-   Travel (... Food!)

-   Running 🤔
:::

::: {.column width="70%"}
![](images/kyra.jpg){fig-align="center"}
:::
:::

#  {background-image="images/thetis.jpg"}

#  {background-image="images/cometa.jpg"}

#  {background-image="images/hike.jpg"}

## Graduate School

::: columns
::: column
-   Remote Sensing (lidar, DAP, optical)

-   Industry / government operationalization

-   Peer-reviewed publications (h-index: 20)

-   Open-source Software development (e.g. `sgsR`, `lidR`)

-   Mentorship (academia, industry, government)
:::

::: column
![](images/pointcloud.jpg){fig-align="center"}
:::
:::

## PhD Research

![](images/thesis.jpg){fig-align="center"}

::: {.fragment .fade-up}
<center>🏆 Best National PhD Thesis</center>

<center>🏆 Faculty of Forestry (UBC) Best PhD Thesis</center>
:::

## Chapter 5 - Forest Regeneration

![](images/regen.png){fig-align="center"}

::: {.fragment .fade-up}
<center>Does plot placement make sense?</center>
:::

## Post-Doctoral Research

::: columns
::: {.column width="40%"}
-   Data-driven, salable, representative inventories

-   Use best-available forest structure data

-   Reduce sampling intensity, cost

-   Flexible to user needs
:::

::: {.column width="60%"}
![](images/paper.jpg)
:::
:::

# [🌲🌳 Structurally Guided Sampling]{style="float:center;text-align:center;"} {background-color="#356734"}

## Take-away message <i class="fa-brands fa-r-project" style="height:120px;vertical-align:middle;"></i> <img src="images/logo.png" height="120px" style="vertical-align:middle;"/> {.smaller}

-   Need flexible, scalable, open-source approaches for ensuring representative sampling frameworks

-   **`sgsR`** - R-package for *structurally guided sampling* for enhanced forest inventories.

::: info-box
**`sgsR`** stands for **s**tructurally **g**uided **s**ampling implemented in **R**

<ul>

<li><i class="fa-solid fa-bullseye"></i>Stratification and sampling functions to guide *primarily model-based* sampling approaches</li>

<li><i class="fa-solid fa-bullseye"></i>Focus on *management-level inventories*</li>

<li><i class="fa-brands fa-github"></i>[Documentation and vignettes online](https://tgoodbody.github.io/sgsR/)</li>

<li><i class="fa-solid fa-bowl-food"></i>Funded by the **Canadian Wood Fibre Centre, Canadian Forest Service**</li>

<li><i class="fa-solid fa-bowl-food"></i>Operationalized on \>20M ha of forest in Canada (Government, Industry)</li>

</ul>
:::

# [🌲🌳 Forest inventories]{style="float:center;text-align:center;"} {background-color="#356734"}

## 🌲🌳 Forest inventories

**Purpose:** Obtain knowledge about the population (forest area) under investigation and provide estimates of specific target attributes

::: {.fragment .fade-up}
**Needed information:** Defined by the scope & scale of the inventory. Answered by questions like:
:::

::: {.fragment .fade-up}
::: info-box
<ul>

<li><i class="fa-solid fa-bullseye"></i>Who/what is the information for? (e.g. Reporting obligations, timber production)</li>

<li><i class="fa-brands fa-github"></i>How big of an area are we inventorying? (e.g. National level, operational level)</li>

</ul>
:::
:::

::: {.fragment .fade-up}
-   Answers dictate the sampling approaches to fulfill inventory obligations and objectives
:::

# [🚩 Sampling]{style="float:center;text-align:center;"} {background-color="#356734"}

## 🚩 Sampling

::: {.fragment .fade-up}
<center>***Mensuration is a cornerstone of forest management***</center>
:::

::: {.fragment .fade-up}
-   Sampling drives accurate forest attribute estimates (e.g. carbon content, forest area, stem volume)
:::

::: {.fragment .fade-up}
::: info-box
Sampling can be:

<ul>

<li><i class="fa-solid fa-bullseye"></i>Labour intensive</li>

<li><i class="fa-brands fa-github"></i>Logistically challenging</li>

<li><i class="fa-brands fa-github"></i>**Expensive**</li>

</ul>
:::
:::

::: {.fragment .fade-up}
-   We want to balance these challenges with attribute estimate accuracy
:::

# [🎲📊 Traditional sampling approaches]{style="float:center;text-align:center;"} {background-color="#356734"}

## 🎲 Random sampling

-   Randomized sampling where probabilities for each sample unit can be equivalent and known

```{r}
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
#--- simple random sampling ---#
sample_srs(raster = mr, nSamp = 100, plot = TRUE)
```

## 🟩 Systematic sampling

-   Systematic sampling methods are also common, where sample units are selected based on a defined distance

```{r}
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
#--- systematic sampling ---#
sample_systematic(raster = mr, cellsize = 1000, plot = TRUE)
```

## 🟩 Systematic sampling {auto-animate="true"}

-   Different tessellation shapes are common

```{r}
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
#--- systematic sampling in hexagons ---#
sample_systematic(raster = mr, cellsize = 1000, square = FALSE, plot = TRUE)
```

## 🟩 Systematic random sampling {auto-animate="true"}

-   And combinations of systematic and simple random sampling also exists

```{r}
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
#--- systematic random sampling ---#
sample_systematic(raster = mr, cellsize = 1000, 
                  square = FALSE, location = "random", plot = TRUE)
```

## 🎲📊 Traditional sampling approaches

-   We now understand a bit more about probability-based sampling:

::: {.fragment .fade-up}
::: info-box
<ul>

<li><i class="fa-solid fa-bullseye"></i>Randomized</li>

<li><i class="fa-brands fa-github"></i>Sampling unit probabilities are equal, known, or can be known</li>

<li><i class="fa-brands fa-github"></i>Different methods exist *(e.g. simple random, systematic)*</li>

</ul>
:::
:::

::: incremental
-   Time-tested

-   Simple

-   Efficient

-   Broadly used
:::

# [❓ <br> **What can we do to improve sampling efficiency and attribute estimate accuracy** </br> ❓]{style="float:center;text-align:center;"} {background-color="#ddbc76"}

# [🛰👩🏻‍💻 Auxiliary data]{style="float:center;text-align:center;"} {background-color="#356734"}

## 👩🏻‍💻 Auxiliary data

-   Empirical distributions that are spatially explicit

::: {.fragment .fade-up}
::: info-box
<ul>

<li><i class="fa-solid fa-bullseye"></i>Imagery *(satellite, airborne, drone)*</li>

<li><i class="fa-brands fa-github"></i>Feature-based inventories *(species, management type)*</li>

<li><i class="fa-brands fa-github"></i>ALS metrics *(height, cover, variability)*</li>

</ul>
:::
:::

::: {.fragment .fade-up}
✔️ Understand inventory attributes of interest
:::

::: {.fragment .fade-up}
✔️ Associate auxiliary data correlated to those attributes
:::

::: {.fragment .fade-up}
✔️ Sample across the full range of attribute variability
:::

# [💠🔢 Stratification]{style="float:center;text-align:center;"} {background-color="#356734"}

## 💠🔢 Stratification

<center>*"Our results highlight that [LiDAR data integrated with field data sampling designs can provide broad-scale assessments of vegetation structure and biomass]{style="color:red"}, i.e., information crucial for carbon and biodiversity science."* [@hawbaker2009]</center>

![](images/sgs.png){fig-align="center"}

## 💠🔢 Stratification

<center>*"The ALS data also provides an [excellent source of prior information]{style="color:red"} that may be used in the [design phase of the field survey to reduce the size of the field data set."]{style="color:red"}*[@gobakken2013]</center>

![](images/sgs2.png){fig-align="center" width="863"}

## 💠🔢 Stratification - [1]{.circle} metric {auto-animate="true"}

``` r
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mr$zq90, # p90
                           nStrata = 5) # 5 strata in p90
```

## 💠🔢 Stratification - [1]{.circle} metric {auto-animate="true"}

``` {.r code-line-numbers="2"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mr$zq90, # p90
                           nStrata = 5) # 5 strata in p90
```

## 💠🔢 Stratification - [1]{.circle} metric {auto-animate="true"}

``` {.r code-line-numbers="2-3"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mr$zq90, # p90
                           nStrata = 5) # 5 strata in p90
```

::: {.fragment .fade-up}
![](images/strat_1.png){fig-align="center"}
:::

## 💠🔢 Stratification - [2]{.circle} metrics {auto-animate="true"}

``` r
#--- perform dual metric stratification ---#
sraster <- strat_quantiles(mraster = mr[[c(1,3)]], # p90
                           nStrata = list(10,3))
```

## 💠🔢 Stratification - [2]{.circle} metrics {auto-animate="true"}

``` {.r code-line-numbers="2:3"}
#--- perform dual metric stratification ---#
sraster <- strat_quantiles(mraster = mr[[c(1,3)]], # p90 & zsd
                           nStrata = list(10,3))
```

::: {.fragment .fade-up}
![](images/strat_2.png){fig-align="center"}
:::

## 🎯 Structurally guided sampling {.smaller auto-animate="true"}

```{r}
#| echo: true
#| eval: true
#| results: false
#| fig-align: center

#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mr$zq90, # p90
                           nStrata = 10)

#--- structurally guided stratified sampling ---#
sample_strat(sraster = sraster, nSamp = 100,mindist = 200, plot = TRUE)
```

# [`sgsR`]{style="float:center;text-align:center;"} {background-color="#356734"}

![](images/logo.png){fig-align="center"}

## `sgsR` purpose <img src="images/logo.png" height="120px" style="vertical-align:middle;"/> {.smaller}

**`sgsR`** is a toolbox to provide primarily *model-based* sampling approaches for *management-level* forest inventories that are:

::: info-box
<ul>

<li><i class="fa-brands fa-github"></i>Transparent</li>

<li><i class="fa-brands fa-github"></i>Repeatable</li>

<li><i class="fa-solid fa-bullseye"></i>Tuneable</li>

<li><i class="fa-solid fa-bullseye"></i>Spatially-explicit</li>

</ul>
:::

## Algorithm structure <i class="fa-brands fa-r-project" style="height:120px;vertical-align:middle;"></i> <img src="images/logo.png" height="120px" style="vertical-align:middle;"/> {.smaller}

::: incremental
-   **`sgsR`** was built using the `terra`, `sf`, & `tidyverse` packages

-   There are 4 primary function verbs that **`sgsR`** uses:
:::

::: {.fragment .fade-up}
::: info-box
<ul>

<li><i class="fa-brands fa-github"></i>`strat_*` - apply stratification to metrics raster (mraster) and output a stratified raster (sraster)</li>

<li><i class="fa-brands fa-github"></i>`sample_*` - allocate samples using srasters produced from strat\_\* functions</li>

<li><i class="fa-solid fa-bullseye"></i>`calculate_*`- calculate sample information or create useful intermediary sampling products</li>

<li><i class="fa-solid fa-bullseye"></i>`extract_*` - extract pixels values from rasters to samples</li>

</ul>
:::
:::

::: {.fragment .fade-up}
![](images/flow-01.png){fig-align="center" width="655"}
:::

##  {background-color="#356734"}

![](images/flow.png){fig-align="center"}

# [Example 1]{.story} 🌱 [Stratified sampling constrained by access]{style="float:right;text-align:right;"} {background-color="#356734"}

## [Example 1]{.story} 🌱 Stratified sampling constrained by access

::: incremental
-   Imagine you are a project developer who wants to accurately estimate their carbon stocks

-   

-   You love the idea of sgsR and want to use it
:::

::: {.fragment .fade-up}
![](images/rik.jpeg){fig-align="center"}
:::

## [Example 1]{.story} 🌱 Stratified sampling constrained by access

1️⃣ Read in some ALS metrics

``` {.r code-line-numbers="1,3,5,6"}
#--- Stratification ---#
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")

#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access

1️⃣ Read in some ALS metrics

``` {.r code-line-numbers="6"}
#--- Stratification ---#
#--- Load ALS metrics from sgsR internal data ---#
r <- system.file("extdata", "mraster.tif", package = "sgsR")

#--- Read ALS metrics using the terra package ---#
mraster <- terra::rast(r)
```

```{r}
#| warning: false
#| echo: false
#| results: hide
#| fig-align: center
terra::plot(mr$zq90, main = "p90")
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

2️⃣ Read in a linear road `access` network

``` {.r code-line-numbers="4-5"}
#--- Load access network from sgsR internal data ---#
a <- system.file("extdata", "access.shp", package = "sgsR")

#--- load the access vector using the sf package ---#
access <- sf::st_read(a)
```

```{r}
#| warning: false
#| echo: false
#| results: hide
#| fig-align: center
terra::plot(mr$zq90, main = "p90 with road access")
plot(access, add = TRUE, col = "black")
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

3️⃣ Stratify `p90` in to 4 strata based on quantiles

``` r
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90
                           nStrata = 4) # desired number of strata (4)
```

```{r}
#| warning: false
#| echo: false
#| results: hide
#| fig-align: center
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mr$zq90, # input ALS metric - p90
                           nStrata = 4, plot = TRUE) # desired number of strata (4)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

4️⃣ Now lets use the `sraster` output

``` {.r code-line-numbers="6"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90
                           nStrata = 4) # desired number of strata (4)

#--- perform sampling ---#
samples <- sample_strat(sraster = sraster, 
                        nSamp = 100, 
                        allocation = "proportional", # equal, manual, optimal
                        access = access, 
                        buff_inner = 50, 
                        buff_outer = 400)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

5️⃣ Request 100 samples

``` {.r code-line-numbers="6-7"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90
                           nStrata = 4) # desired number of strata (4)

#--- perform sampling ---#
samples <- sample_strat(sraster = sraster, 
                        nSamp = 100, 
                        allocation = "prop", # equal, manual, optimal
                        access = access, 
                        buff_inner = 50, 
                        buff_outer = 400)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

6️⃣ Sample proportional to stratum size

``` {.r code-line-numbers="6-8"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90
                           nStrata = 4) # desired number of strata (4)

#--- perform sampling ---#
samples <- sample_strat(sraster = sraster, 
                        nSamp = 100,
                        allocation = "prop", # equal, manual, optimal
                        access = access, 
                        buff_inner = 50, 
                        buff_outer = 400)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

7️⃣ Bring in the `access` road

``` {.r code-line-numbers="6-9"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90
                           nStrata = 4) # desired number of strata (4)

#--- perform sampling ---#
samples <- sample_strat(sraster = sraster, 
                        nSamp = 100,
                        allocation = "prop", # equal, manual, optimal
                        access = access, 
                        buff_inner = 50, 
                        buff_outer = 400)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

8️⃣ Specify we don't want samples within 50 m of `access`

``` {.r code-line-numbers="6-10"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90
                           nStrata = 4) # desired number of strata (4)

#--- perform sampling ---#
samples <- sample_strat(sraster = sraster, 
                        nSamp = 100, 
                        allocation = "prop", # equal, manual, optimal
                        access = access, 
                        buff_inner = 50, 
                        buff_outer = 400)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {auto-animate="true"}

9️⃣ Or further than 400 m from `access`

``` {.r code-line-numbers="6-11"}
#--- perform stratification ---#
sraster <- strat_quantiles(mraster = mraster$zq90, # input ALS metric - p90
                           nStrata = 4) # desired number of strata (4)

#--- perform sampling ---#
samples <- sample_strat(sraster = sraster, 
                        nSamp = 100, 
                        allocation = "prop", # equal, manual, optimal
                        access = access, 
                        buff_inner = 50, 
                        buff_outer = 400)
```

## [Example 1]{.story} 🌱 Stratified sampling constrained by access {.smaller}

![](images/example1.png){fig-align="center"}

::: info-box
<ul>

<li><i class="fa-brands fa-github"></i>Mapped result **(A)** and plotted result **(B)**</li>

<li><i class="fa-brands fa-github"></i>Note buffered `access` in **A**. Points are samples in both **A** & **B**</li>

</ul>
:::

## [Example 1]{.story} 🌱 Comparing distributions

![](images/accesscompare.png){fig-align="center"}

::: info-box
<ul>

<li><i class="fa-brands fa-github"></i> Cumulative frequency distributions</li>

<li><i class="fa-brands fa-github"></i>`access` constrained vs full extent for *p90* **(A)** and *zsd* **(B)**</li>

</ul>
:::

# [Example 2]{.story} 🌿 [Augmenting an `existing` sample]{style="float:right;text-align:right;"} {background-color="#356734"}

## 🌿 Augmenting an `existing` sample {background-color="#356734"}

<center>*"I have an existing sample network, can I use those same sample locations?"* <br></br> *"If I go and visit those same sample units, where should I locate new samples for structural representation?"*</center>

![](images/density.png){fig-align="center"}

## [Example 2]{.story} 🌿 Augmenting an `existing` sample {.smaller}

-   Lets create an `existing` sample of 50 plots using simple random sampling (**`sample_srs`**)

-   We are assuming these have been measured or used previously and can be revisited

```{r}
#| warning: false
#| echo: true
#| results: hide
#| fig-align: center
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
```

## [Example 2]{.story} 🌿 Augmenting an `existing` sample {.smaller}

*Adapted Hypercube Evaluation of a Legacy Sample (AHELS)* [@malone2019]

::: info-box
**`sample_ahels()`** works by:

<ul>

<li><i class="fa-brands fa-github"></i>Determine representation of `existing` sample</li>

<li><i class="fa-brands fa-github"></i>Generate quantile and covariance matrices of ALS metrics</li>

<li><i class="fa-brands fa-github"></i>Determine number of additional samples that can / need to be added</li>

<li><i class="fa-brands fa-github"></i>Identify where new samples are needed to balance quantile density and sampling density</li>

<li><i class="fa-brands fa-github"></i>Iteratively locate samples</li>

</ul>
:::

## [Example 2]{.story} 🌿 Augmenting an `existing` sample

1️⃣ We have our `existing` sample

``` {.r code-line-numbers="1-2"}
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
```

```{r}
#| warning: false
#| echo: false
#| results: hide
#| fig-align: center
set.seed(2022)
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)
```

## [Example 2]{.story} 🌿 Augmenting an `existing` sample

2️⃣ Now we can use the `sample_ahels()` algorithm with our ALS metrics

``` {.r code-line-numbers="5-6"}
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)

#--- augment sample network using sample_ahels ---#
#--- perform ahels sampling ---#
sample_ahels(mraster = mr,
             existing = existing,
             nSamp = 50)
```

## [Example 2]{.story} 🌿 Augmenting an `existing` sample

3️⃣ Specify our `existing` sample

``` {.r code-line-numbers="5-7"}
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)

#--- augment sample network using sample_ahels ---#
#--- perform ahels sampling ---#
sample_ahels(mraster = mr,
             existing = existing,
             nSamp = 50)
```

## [Example 2]{.story} 🌿 Augmenting an `existing` sample

4️⃣ And specify we want 50 new sample units (`nSamp`)

``` {.r code-line-numbers="5-8"}
#--- simple random sampling ---#
existing <- sample_srs(raster = mr, nSamp = 50, plot = TRUE)

#--- augment sample network using sample_ahels ---#
#--- perform ahels sampling ---#
sample_ahels(mraster = mr,
             existing = existing,
             nSamp = 50)
```

## [Example 2]{.story} 🌿 Augmenting an `existing` sample

![](images/e2s.png){fig-align="center"}

::: info-box
<ul>

<li><i class="fa-brands fa-github"></i>Mapped result **(A)** and plotted result **(B)**</li>

<li><i class="fa-brands fa-github"></i>Note ratios (black/red) and additional added samples *(e.g. [n = 2]{style="color:red"}*)</li>

</ul>
:::

## `sample_ahels()` result

![](images/hist.png){fig-align="center"}

::: info-box
<ul>

<li><i class="fa-brands fa-github"></i>`existing` only **(A)** and addition of new samples **(B)**</li>

<li><i class="fa-brands fa-github"></i>We see that metric and sample density become quite even - structurally representative</li>

</ul>
:::

## Summary <img src="images/logo.png" height="120px" style="vertical-align:middle;"/>

::: {.fragment .fade-in}
-   Structurally guided sampling methods show promise for *model-based* sampling
:::

::: {.fragment .fade-in}
-   The **`sgsR`** package provides many methods to implement SGS approaches
:::

::: {.fragment .fade-in}
-   We presented a few examples of **`sgsR`** functionality
:::

::: {.fragment .fade-in}
-   If interested - come and talk to me & use the link on the slides more info!
:::

# [🤲🤝🙏 Thank you!]{style="float:center;text-align:center;"} {background-color="#356734"}

<center>Special thanks to the *Canadian Wood Fibre Centre* for funding this research!</center>

## 🤲🤝🙏 Thank you!

<center>***🐤 [\@GoodbodyT](https://twitter.com/GoodbodyT) 🐤 [\@IRSS_UBC](https://twitter.com/IRSS_UBC)***</center>

<center>

::: info-box
***Special thanks to my collaborators***

::: columns
::: {.column width="30%"}
-   Martin Queinnec
-   Joanne White
-   Andrew Hudak
-   Ruben Valbuena
-   Murray Woods
-   David Auty
:::

::: {.column width="10%"}
:::

::: {.column width="30%"}
-   Antoine Leboeuf
-   Ian Sinclair
-   Grant McCartney
-   Jean-Francois Prieur
-   Piotr Tompalski
:::
:::
:::

</center>

## 🤲🤝🙏 Thank you!

![](images/affiliations.png) \## Additional resources

This presentation was made with [Quarto](https://quarto.org/) and will be made available on Github following the presentation at ForestSAT\

![](images/logo.png){fig-align="center" width="182"}
